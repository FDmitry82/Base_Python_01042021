"""Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной
платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах*ставка в
час) + премия. Для выполнения расчета для конкретных значений необходимо запускать
скрипт с параметрами."""
print('-----------------Задание 1-----------------------')
# from sys import argv
# file_name, worked_hour, rate, bonus = argv
worked_hour = 40
rate = 5
bonus = argv = 1.15

calculation = (int(worked_hour) * int(rate)) + int(bonus)
print(f"Ваша выплата составляет: {calculation}")

#print('-------------------------------------------------')


print('-----------------Задание 2-----------------------')
"""
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
"""
'''Вариант с генератором'''
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new = [el for el in my_list if el > my_list[my_list.index(el)-1]]
print(new)

''' Вариант с циклом
i = 0
new= []
for el in my_list:
    if el > my_list[i-1]:
        new.append(el)
    i+=1
print(new)
'''

#print('-------------------------------------------------')



print('-----------------Задание 3-----------------------')
"""Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""

numbers = range(20, 241)
new_list = [el for el in numbers if el%20==0 or el%21==0]
print(new_list)
#print('-------------------------------------------------')



print('-----------------Задание 4-----------------------')
'''Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.'''

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print("Исходные элементы списка:\n", my_list)
new_list = [i for i in my_list if my_list.count(i) == 1]
print("Элементы списка, не имеющие повторений:\n", new_list)
#print('-------------------------------------------------')


print('-----------------Задание 5-----------------------')
"""Реализовать формирование списка, используя функцию range() и возможности генератора. В
список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()."""

from functools import reduce

list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел в диапазоне [100..1000]:\n", list)
print("Произведение всех элементов списка:\n", reduce(lambda x,y: x*y, list))
#print('-------------------------------------------------')


print('-----------------Задание 6-----------------------')
"""Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools ."""


from itertools import count, cycle
print("<<Бесконечный итератор целых чисел, начиная с указанного>>")
n = int(input("Введите целое число:"))
for m in count(n):
    print(m, end=' ')
    if m == 50:
        break

print("\n<<бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее>>")
list = [5, 8, 9, 1, 2, 4, 7, 1, 4, 3]
for i in cycle(list):
    print(i, end=' ')
    if i == 3:
        break

#print('-------------------------------------------------')


print('\n-----------------Задание 7-----------------------')
"""Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
значение. При вызове функции должен создаваться объект-генератор. Функция должна
вызываться следующим образом: for el in fibo_gen(). Функция отвечает за получение
факториала числа, а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
четырёх 4! = 1 * 2 * 3 * 4 = 24."""

from math import factorial

def factorial_gen(n):
    for i in range(n):
        print(i, end='! = ')
        yield factorial(i)

print("<<Программа вычисления факториала числа>>")
for el in factorial_gen(15):
    print(el)

print('-------------------------------------------------')